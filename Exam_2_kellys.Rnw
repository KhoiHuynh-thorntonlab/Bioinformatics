% Compile with knitr
\documentclass{article}
\usepackage[sc]{mathpazo} %This changes the font away from Computer Modern
\usepackage[T1]{fontenc}
\usepackage{geometry} %Sets page dimensions
\geometry{verbose,tmargin=2.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}
\setcounter{secnumdepth}{2}
\setcounter{tocdepth}{2}
%\usepackage{array,booktabs}
\usepackage{cite} %Might be necc for bibtex
\usepackage[labelfont=bf]{caption} % Necessary for bold-Figure titles.
\usepackage[unicode=true,pdfusetitle,
 bookmarks=true,bookmarksnumbered=true,bookmarksopen=true,bookmarksopenlevel=2,
 breaklinks=false,pdfborder={0 0 1},backref=false,colorlinks=false]
 {hyperref}
\definecolor{darkblue}{rgb}{0.0,0.0,0.3}
\hypersetup{colorlinks,breaklinks,
            linkcolor=darkblue,urlcolor=darkblue,
            anchorcolor=darkblue,citecolor=darkblue}
%\hypersetup{pdfstartview={XYZ null null 1}} %this is knitr default
\usepackage{breakurl}
\usepackage{etoolbox} %
\usepackage{forloop}
\usepackage{tikz} %necc for latex foreach loops
\usepackage{subcaption} %for subfigures
\usepackage{amsmath}%required for nice equations
\usepackage{graphicx}%this package comes in handy for including graphics
\usepackage{url} %for typesetting pretty URLs
%\usepackage{inconsolata} % Made R code look tidier in early versions of knitr
\begin{document}% there are some commands in latex you can mess with; never mess with this one
% Also, never mess with the following chunk unless you think you know what you're doing:
<<setup, include=FALSE, cache=FALSE>>=
# this is equivalent to \SweaveOpts{...}
opts_chunk$set(fig.path='figure/latex-', fig.align='center', fig.show='hold')
options(replace.assign=TRUE,width=90)
require(highlight)
@ 
\title{Exam 2: Medulloblastoma Gene Expression Study}
\author{%this section includes affiliations
Stephen Kelly\,$^{1}$, %Your name
% John Q. Public\,$^{2}$,  %Your collaborator's name
 and Dr. Feelgood\,$^{1,*}$ %Your graduate supervisor's name, or my name, if you are an undergraduate.
\\
\\
%Affiliations:
\footnotesize $^{1}$Department of Biological Sciences, Salisbury University,\\
\footnotesize Henson Science Hall 230H, Salisbury, MD 21801, USA\\
\\
\footnotesize $^{*}$To whom correspondence should be addressed. Tel: 410-555-5555; Fax: 410-555-5555;\\
\footnotesize Email: \texttt{yourEmailAddress@salisbury.edu, supervisorEmailAddress@salisbury.edu}
} 
\date{October 23, 2013}
\maketitle
\begin{abstract}
This study sought ot identify mutations that cause medulloblastoma, a rare childhood brain cancer.  Samples were taken from 76 medulloblastomas for RNA analysis, divided into 4 classes of expression. This research seeks to identify changes in gene expression that could be driving the formation of these tumors. \cite{NCBI} 
\end{abstract}
\section{Introduction}
<<loadCEL,include=TRUE, eval=TRUE>>= 
#
suppressPackageStartupMessages(require(affy))
suppressPackageStartupMessages(require(plyr))
celdir<-c('/opt//Genomics490//Microarray_CEL_Files/EXAM2_Microarray_Data/')
dat<-ReadAffy(celfile.path=celdir)
save(dat,file='dat_AffyBatch.Robj')
load(file='/opt/Genomics490/Microarray_CEL_Files/EXAM2_Microarray_Data/medulloblastoma_phenodata.Robj') 
AA<-rep.int('Medullo_',times=length(sampleNames(dat)))
BB<-seq(1:length(AA))
ArrayNames<-paste(AA,BB,sep='')
sampleNames(dat)<-ArrayNames 
pData(dat)<-medulloblatoma_phenodata
row.names(pData(dat))<-ArrayNames
#within(pData(dat),Age_total<-(((Age_years)*12)+(Age_months)))
pData(dat)<-within(pData(dat),Age_total<-(((Age_years)*12)+(Age_months)))
pData(dat)<-subset(pData(dat),select=c('Array','PatientID','Subgroup','Sex','Race','Stage','CelName','Age_total'))
save(dat,file='dat_AffyBatch.Robj') #new pData has been applied, saved file
#load('/home/kellys/Exam_2_usethis/dat_AffyBatch.Robj') 
@

To perform an analysis on this data set, we used the R\cite{R} programming language. First we used the Affymetrix\cite{affy} and Plyr\cite{plyr} packages, and loaded the CEL files from the study. These were then saved to a local directory, and sample phenotype data was loaded and applied to them. This overwrote the array names to make them more legible, and applied necessary supplemental information about the samples that was used later. 

<<xtable2,results='asis',eval=TRUE>>=
require(xtable) #dat[rows,coluimns]
table<-pData(dat)[1:30,c(2,3,6,4,8)]
print(xtable(table,
       caption='Patient information',
       include.rownames=T)) #generate a nice little table to display all the info
@
In this section, we used the XTable\cite{xtable} R package to make a table showing information about the patients. There are 76 total patient samples included in this study, but only the first 30 are displayed for the sake of saving page space. 
\section{Quality Control}
<<QC1,eval=TRUE,include=TRUE>>=
suppressPackageStartupMessages(require(affyPLM))
RNADegpastefile<-0 #the number of RNADeg png's written out
RLEpastefile<-0 #the number of RLE png's written out
NUSEpastefile<-0 #the number of NUSE png's written out
Arraypastefile<-0 #does not actually do anything here, works better to declare it later
section<-19 #Some number that is divisible by 76 (the number of arrays)
iteration<-1
Count1<-0
Count2<-0
i<-1
@

<<qc2,eval=TRUE>>=
#run this loop one time with all arguments uncommented in order to print out images. Then, comment out the image printing steps and only keep the [x]pastefile<-[x]pastefile+1 steps.
for (i in seq(from = 1, to = length(sampleNames(dat)), by=section)) {
    print(paste("Iteration #",iteration,sep=' '))

  Count1<-i
  Count2<-Count1+(section-1)
  print(paste("Arrays Processed",Count1,Count2,sep=':'))
  QC_Batch<-dat[,c(Count1:Count2)]
#print(sampleNames(QC_Batch))
    
       Pset<-fitPLM(QC_Batch)


  Colors<-rainbow(n=length(sampleNames(QC_Batch)))
  deg<-AffyRNAdeg(QC_Batch)
    
    #Begin RNA Deg pastefile
    
  pngfile=paste('RNA_Deg_Plot',iteration,'.png', sep='')
  png(file=pngfile,width=700,height=700,res=80)
  RNAdeg<-plotAffyRNAdeg(deg,cols=Colors)
  legend(legend=sampleNames(QC_Batch),
       x='topleft',
       lty=1,
       cex=0.9,
       col=Colors)
  dev.off()
    
    RNADegpastefile<-RNADegpastefile+1

  print(summaryAffyRNAdeg(deg) ) 
    
 #End RNA degradation pastefile
    
    
   #Begin RLE pastefile
    
  pngfile=paste('RLE',iteration,'.png', sep='')
  png(file=pngfile,width=700,height=700,res=80)
  RLE(Pset,main=paste('RLE for Gene Expression-Based Prostate Cancer Treatment',Count1,Count2,sep=':'),col=Colors,las=2)
  dev.off()
    
    RLEpastefile<-RLEpastefile+1
    
#End RLE pastefile
    
    #Begin NUSE pastefile
    
  pngfile=paste('NUSE',iteration,'.png', sep='')
  png(file=pngfile,width=700,height=700,res=80)
  NUSE(Pset,main=paste('NUSE for Gene Expression-Based Prostate Cancer Treatment',Count1,Count2,sep=':'),col=Colors,las=2)
  dev.off()
    
    NUSEpastefile<-NUSEpastefile+1
    
#End NUSE pastefile
    
  iteration<-iteration+1
  print(paste("Going to Iteration #",iteration,sep=''))
}

  # Write out 76 pseudoimages.

  QC_Batch<-dat
   ArrayNames<-sampleNames(QC_Batch)
 Pset<-fitPLM(QC_Batch)
   for (i in 1:length(ArrayNames)) 
     {
     pngfile=paste(i,".png", sep='')
     png(file=pngfile,width=700,height=700,res=80)
     image(Pset,which=i,type='resids',useRaster=F,add.legend=T)
    dev.off()
     
     Arraypastefile<-Arraypastefile+1
   }
@
The AffyPLM\cite{affyPLM} package was used to help run quality control on the arrays. Counters were created and used to keep track of the number of .PNG image files that were written out by the for-loops used in this section. These images will be displayed in the sections below to allow for data analysis.
\subsection{RNA Degredation}
In this section, we examine the RNA degredation of the arrays. Since we know that RNA degrades in the 5' to 3' direction, we can create linear models to illustrate the amount of RNA degredation across the gene sets. Again, AffyPLM\cite{affyPLM} was used to make these plots, while a Latex for loop was used to display them. A slope of >1.7 indicates a large amount of RNA degredation. The majority of these arrays show slopes of much greater than 1.7, therefore we can conclude that there was a large amount of RNA degredation on these arrays. However, the RNA degredation was rather consistent across arrays, so we will not exclude data based on this.
%this is how a Latex forloop works:
%\forloop[〈step〉]{〈counter〉}{〈initial value〉}{〈condition〉}{〈code〉}
\newcounter{RNADegcounter}
\newcounter{RNADegiterator}
\setcounter{RNADegiterator}{12}
\begin{figure}
    \centering
      \forloop[1]{RNADegcounter}{1}{\value{RNADegcounter} < \Sexpr{(RNADegpastefile)+1}}{ 
        \ifnumless{\value{RNADegcounter}}{\value{RNADegiterator}+1}{
          \begin{subfigure}[b]{0.3\textwidth}
            \centering
              \includegraphics[width=\textwidth]{RNA_Deg_Plot\arabic{RNADegcounter}}
              \caption{RNA Degredation Plot}
              \label{}
              \end{subfigure}
              ~ %
              \ifnumequal{\value{RNADegcounter}}{\value{RNADegiterator}}{
                \caption{End of Figure 1.}
                \label{}
                \end{figure}
                \addtocounter{RNADegiterator}{12}
                \arabic{RNADegiterator}
                \begin{figure}
                \centering
              }{}
              \ifnumequal{\value{RNADegcounter}}{\Sexpr{RNADegpastefile}}{            
                \caption{RNA Degredation Plots THE END}
                \label{}
                \end{figure}
              }{}
}{}
}
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Relative Linear Expression}
In this section, we will examine the Relative Log Expression aka RLE, which shows the expression values for each array as compared to the median expression values for all instances of the probeset on all arrays. Due to the nature of the analysis method, differences in data here can be more subtle. Several arrays failed the RLE evaluation, and will be listed later. 
\newcounter{RLEcounter}
\newcounter{RLEiterator}
\setcounter{RLEiterator}{12}
\begin{figure}
    \centering
      \forloop[1]{RLEcounter}{1}{\value{RLEcounter} < \Sexpr{(RLEpastefile)+1}}{ 
        \ifnumless{\value{RLEcounter}}{\value{RLEiterator}+1}{
          \begin{subfigure}[b]{0.3\textwidth}
            \centering
              \includegraphics[width=\textwidth]{RLE\arabic{RLEcounter}}
              \caption{RLE Plot}
              \label{}
              \end{subfigure}
              ~ %
              \ifnumequal{\value{RLEcounter}}{\value{RLEiterator}}{
                \caption{End of Figure 1.}
                \label{}
                \end{figure}
                \addtocounter{RLEiterator}{12}
                \arabic{RLEiterator}
                \begin{figure}
                \centering
              }{}
              \ifnumequal{\value{RLEcounter}}{\Sexpr{RLEpastefile}}{            
                \caption{RLE Plots THE END}
                \label{}
                \end{figure}
              }{}
}{}
}
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 \subsection{NUSE}
NUSE stands for Normalized Unscaled Standard Errors. In these plots, data from each gene is normalized based on the entire array's data so that values are comparable. A good NUSE graph has the data box near the center value of one. As you can see, some of these arrays failed this analysis by having boxes that are stretched out of proportion, or by having boxes that do not touch the center line.
\newcounter{NUSEcounter}
\newcounter{NUSEiterator}
\setcounter{NUSEiterator}{12}
\begin{figure}
    \centering
      \forloop[1]{NUSEcounter}{1}{\value{NUSEcounter} < \Sexpr{(NUSEpastefile)+1}}{ 
        \ifnumless{\value{NUSEcounter}}{\value{NUSEiterator}+1}{
          \begin{subfigure}[b]{0.3\textwidth}
            \centering
              \includegraphics[width=\textwidth]{NUSE\arabic{NUSEcounter}}
              \caption{NUSE Plot }
              \label{}
              \end{subfigure}
              ~ %
              \ifnumequal{\value{NUSEcounter}}{\value{NUSEiterator}}{
                \caption{End of Figure 1. Iterator is}
                \label{}
                \end{figure}
                \addtocounter{NUSEiterator}{12}
                \arabic{NUSEiterator}
                \begin{figure}
                \centering
              }{}
              \ifnumequal{\value{NUSEcounter}}{\Sexpr{NUSEpastefile}}{            
                \caption{NUSE Plots THE END}
                \label{}
                \end{figure}
              }{}
}{}
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
\subection{Array Image Analysis}
We shall take a look at psuedoimages of the arrays in the set! Because there are  76 total arrays, we will just look at  a single typical 'good' array. Later, we will show the bad arrays that did not pass visual inspection. Remember, a good array shows an even distribution of random hybridization patterns, free of blotches, splotches, nicks, dings, creases, lines, or marks. 
\begin{figure}
        \centering
        \begin{subfigure}[b]{0.3\textwidth}
                \centering
                \includegraphics[width=\textwidth]{19}
                \caption{A good quality array}
                \label{fig:Cont8}
        \end{subfigure}%
                ~ %
        
        \caption{Pseudo-images of microarray}
        \label{fig:cels}
\end{figure}
As you can see, this array is neither under nor over expressed. It shows random hybridization distributed evenly over the entire chip, with no defects.  
\subsection{Bad Arrays}
Bad arrays must be removed from the data set, or they will skew the results. Arrays are being evaulated based on the RNA Degredation plots, the RLE plots, and the NUSE plots, along with visual hybridization analysis. Visually, the arrays must be free of defects, splotches, and must show an evenly distributed random hybridization.
Arrays that fail any of these analyses will be removed from the set. We will display all arrays that were removed from the set.
In order to remove bad arrays, a vector is created holding the numbers of each failed array. Then, a new data series is created to hold all failed arrays, while the failed arrays are found within the original data set and removed. The object holding the bad arrays is later used to write out image files of the bad arrays. These images are displayed below in a figure created by a Latex for loop, the creation of which required countless hours and several sleepless nights. 
<<BADARRAYS,eval=TRUE,include=TRUE>>=
BadArrays<-sort(unique(c(8,12,14,24,26,33,37,40,41,44,46,49,50,51,52,53,60,63,64,65,68,70,72,74,75,2,3,8,15,24,37,42,45,49,51,52,72,76,12,37,49,75))) #all bad arrays 
#these arrays failed visual tests: 8,12,14,24,26,33,37,40,41,44,46,49,50,51,52,53,60,63,64,65,68,70,72,74,75,
#these arrays failed NUSE: 2,3,8,15,24,37,42,45,49,51,52,72,76,
#these arraus failed RLE: 12,37,49,75,
bad_dat<-dat[,BadArrays] #puts all the bad arrays into an object, for later printing
length(sampleNames(bad_dat)) #checks the length of that object
dat<-dat[,-BadArrays] #removes the bad arrays from the original dat
length(sampleNames(dat)) #checks the length of dat samplenames after removing bad arrays
#find factors of a number here so you know how to break up sections for future chunks
#http://www.mathsisfun.com/numbers/factors-all-tool.html
Arraypastefile<-length(sampleNames(bad_dat)) #the number of bad array images
BadArrays<-sort(unique(c(8,12,14,24,26,33,37,40,41,44,46,49,50,51,52,53,60,63,64,65,68,70,72,74,75))) #this time only the ones that failed the visual test, for later display
#25 bad arrays failed visual tests
#run the following steps once to write out the Bad Arrays with new names, then comment this section out to compile faster
QC_BatchBad<-bad_dat
   Bad_ArrayNames<-sampleNames(QC_BatchBad)
Pset<-fitPLM(QC_BatchBad)
for (i in 1:length(BadArrays)) 
     {
     pngfile=paste('Bad',i,".png", sep='')
     png(file=pngfile,width=700,height=700,res=80)
     image(Pset,which=i,type='resids',useRaster=F,add.legend=T)
    dev.off()
     
   }
@
The following arrays were removed from the data set.
<<BadArrayNAmes>>=
#These are the bad  arrays:
sampleNames(bad_dat)
@
Here are images of the bad arrays, illustrating the types of defects that can skew gene expression analysis data.
\newcounter{Arraycounter} 
\newcounter{Arrayiterator} 
\setcounter{Arrayiterator}{12}
\begin{figure}
    \centering
      \forloop[1]{Arraycounter}{1}{\value{Arraycounter} < \Sexpr{ (length(BadArrays))+1}}{ 
        \ifnumless{\value{Arraycounter}}{\value{Arrayiterator}+1}{
          \begin{subfigure}[b]{0.3\textwidth}
            \centering
              \includegraphics[width=\textwidth]{Bad\arabic{Arraycounter}}
              \caption{Bad Arrays}
              \label{}
              \end{subfigure}
              ~ %
              \ifnumequal{\value{Arraycounter}}{\value{Arrayiterator}}{
                \caption{Bad Arrays}
                \label{}
                \end{figure}
                \addtocounter{Arrayiterator}{12}
                \arabic{Arrayiterator}
                \begin{figure}
                \centering
              }{}
              \ifnumequal{\value{Arraycounter}}{\Sexpr{(length(BadArrays))}}{            
                \caption{Bad Arrays}
                \label{}
                \end{figure}
              }{}
}{}
}
\section{Normalization}
Now we must normalize the data so the various arrays are comparable to each other. 
<<normalization,eval=TRUE,include=TRUE>>=
#the first time through, run the expresso functions to make the eset and unnormalized eset, and save the result. After that, comment out those functions and just leave the Load step to load them back up from local copies to greatly speed up compiling.

eset<-expresso(dat,
               bgcorrect.method='rma',
               normalize.method='quantiles',
               summary.method='medianpolish',
               pmcorrect.method='pmonly')
save(eset,file="eset.Robj")
# load(file='/home/kellys/Exam_2_usethis/eset.Robj')

eset_unnormalized<-expresso(dat,
               bg.correct='FALSE',
               normalize='FALSE',
               summary.method='medianpolish',
               pmcorrect.method='pmonly')
save(eset_unnormalized,file="eset_unnorm.Robj")
# load(file='/home/kellys/Exam_2_usethis/eset_unnorm.Robj')
normalized.data<-exprs(eset)
unnormalized.data<-exprs(eset_unnormalized)
@
In this step, the Affy\cite{affy} function 'expresso' creates an 'e-set' out of the normalized array data. Another eset is created holding unnormalized data. These files are then saved locally for faster retrieval later. 
\subsection{Check Normalization}
The array data must be normalized to make proper sense out of it, and to be able to compare the results to each other. Then, we must check the normalized data against the unnormalized data. I apologize for the atrocious colors used in these plots.
<<boxplots,eval=TRUE>>=
iterator<-9 # 45 arrays left
Colors<-rainbow(n=length(1:iterator))

for (i in seq(from=1,to=length(colnames(normalized.data)),by=iterator)) {
  Count1<-i
  Count2<-i+(iterator-1)
  print(paste(Count1,Count2,sep=":"))
  NormPlot<-normalized.data[,Count1:Count2]
  UnnormPlot<-unnormalized.data[,Count1:Count2]
  pngfile<-paste('NormUnnorm',Count1,Count2,'Boxplot',".png", sep='-')
  png(file=pngfile,width=700,height=700,res=80)
  par(mfrow=c(2,1))
  boxplot(data.frame(NormPlot),
                     col='green',
                     main=paste('Normalized Medulloblastoma Patients',Count1,Count2,sep=':'),
                     las=2,
                     border=rev(Colors))
  boxplot(data.frame(UnnormPlot),
                     col='purple',
                     main=paste('Unnormalized Medulloblastoma Patients',Count1,Count2,sep=':'),
                     las=2,
                     border=rev(Colors))
  dev.off()
}
#sorry about the disgusting colors, blame Amy
@
In this step, we use the normalized and unnormalized data to write out images of boxplots.
Here are the normalized and unnormalized data plots, for comparison. This shows that the normalization was successful. 
\begin{figure}
  \centering
  \subfloat[NormUnnorm-1-9-Boxplot-.png]{\label{figur:1}\includegraphics[width=0.45\textwidth]{NormUnnorm-1-9-Boxplot-.png}}
  \subfloat[NormUnnorm-10-18-Boxplot-.png]{\label{figur:2}\includegraphics[width=0.45\textwidth]{NormUnnorm-10-18-Boxplot-.png}}
  \subfloat[NormUnnorm-19-27-Boxplot-.png]{\label{figur:3}\includegraphics[width=0.45\textwidth]{NormUnnorm-19-27-Boxplot-.png}}
  \subfloat[NormUnnorm-28-36-Boxplot-.png]{\label{figur:3}\includegraphics[width=0.45\textwidth]{NormUnnorm-28-36-Boxplot-.png}}
   \label{figure}\caption{Medulloblastoma Normalization Verification.}
 \end{figure}
 \begin{figure}
  \centering
  \subfloat[NormUnnorm-37-45-Boxplot-.png]{\label{figur:3}\includegraphics[width=0.45\textwidth]{NormUnnorm-37-45-Boxplot-.png}}
 \label{figure}\caption{Medulloblastoma Normalization Verification.}
 \end{figure}
\section{Annotation}
Now we must annotate the data set in order to describe the chromosomal and functional aspects of each gene in the study.
<<geneReqs,eval=TRUE,include=TRUE>>=
suppressPackageStartupMessages(require(AnnotationDbi))
suppressPackageStartupMessages(require(genefilter))
suppressPackageStartupMessages(require(hgu133plus2.db)) # eset@annotation HG-U133_Plus_2
@

<<removeNonGenes,eval=TRUE,include=TRUE>>=
filt_eset<-nsFilter(eset,
                     require.entrez=T,
                     remove.dupEntrez=T,
                     feature.exclude='^AFFY',
                     var.filter=F)
length(featureNames(eset))
length(featureNames(filt_eset))
eset<-filt_eset$eset
@
In these steps, we use the AnnotationDbi\cite{AnnotationDbi} and Genefilter\cite{genefilter} R packages to create a filter that will remove non-genes from the array data sets. Information is drawn from the HGU133a\cite{hgu133plus2} database. 
\subsection{Annotate Features}
<<annotate,eval=TRUE,include=TRUE>>=
suppressPackageStartupMessages(require(annotate))
suppressPackageStartupMessages(require(R2HTML))
TranscriptID<-featureNames(eset)
GeneSymbol<-getSYMBOL(TranscriptID,'hgu133plus2.db')
GeneName<-as.character(lookUp(TranscriptID,'hgu133plus2.db','GENENAME'))
EntrezID<-as.character(lookUp(TranscriptID,'hgu133plus2.db','ENTREZID'))
EntrezID<-ifelse(EntrezID=="NA",
                 NA,
                 paste("<a href='http://www.ncbi.nlm.nih.gov/gene/",EntrezID, "'>", EntrezID, "</a>", sep=""))
Ensembl <-as.character(lookUp(TranscriptID,'hgu133plus2.db','ENSEMBL'))
Ensembl <-ifelse(Ensembl=="NA",
                 NA,
                 paste("<a href='http://useast.ensembl.org/Homo_sapiens/Gene/Summary?g=",Ensembl, "'>", Ensembl, "</a>", sep=""))
tmp<-data.frame(TranscriptID=TranscriptID,
                GeneSymbol=GeneSymbol,
                EntrezID=EntrezID,
                Ensembl=Ensembl,
                GeneName=GeneName,
                stringAsFactors=F)
tmp[tmp=='NA']<-NA
fData(eset)<-tmp
head(tmp)
save(eset,file="eset_annotated.Robj")
#load(file='/home/kellys/Exam_2_usethis/eset_annotated.Robj') #here we will save the final annotated eset, so that later call steps will load this and not need to run the normalization OR annotation steps when compiling. EDIT: Nevermind, Dr. Anderson wont let me do this :(
@
Now that the non-genes have been removed, we can create an HTML table that includes all the annotated information for the genes. We used the Annotate\cite{annotate} and R2HTML\cite{R2HTML} packages for this.

\section{Differential Expression}
In order to examine the expression of genes, we need to first create some hypotheses based on the samples and variables included in the study. Our hypotheses will be as follows:
\begin{enumerate}
\item There will be a difference in expression between females less than 100 months old with G3 and females less than 100 months old with G4
\item There will be a difference in expression between males 100 months or older with with G4 disease and females 100 months or older with G4 disease.
\item There will be a difference in expression between males 100 months or older with G4 and males 100 months or older with G3
\item There will be a difference in expression between males less than 100 months old with G4 and males less than 100 months old with G3
\item There will be a difference in expression between males less than 100 months with G3 and males less than 100 months with G4
\item There will be a difference in expression between males 100 months or older with G3 and males 100 months or older with G4
\item There will be a difference in expression between females less than 100 months with SHH and females less than 100 months with G3
\item There will be a difference in expression between females older than 100 months with G4 and females older than 100 months with SHH
\item There will be a difference in expression between females less than 100 months old with G4 and females less 100 months old with WNT
\item There will be a difference in expression between males 100 months or older with G4 disease and males less than 100 months old with G4 disease.
\end{enumerate}
Now that we have some hypotheses, we can begin to test them and find out if there really was a difference in gene expression between these groups. 
<<limma,eval=TRUE>>=
require(limma)
require(affy)
require(R2HTML)
#load(file='/home/kellys/Exam_2_usethis/eset_annotated.Robj')
#from the annotated pheno data, use the column titles that we are going to look at
#within(pData(dat),Age_OLD<-subset(pData(eset)['Age_total'],subset=(Age_total >= 100)))
#within(pData(dat),Age_over_100months<-subset(pData(dat),subset=c('Age_total' >=100)))
pData(eset)<-within(pData(eset),IS_OLD<-ifelse(Age_total>=100,'OLD','NA'))
pData(eset)<-within(pData(eset),IS_YOUNG<-ifelse(Age_total<100,'YOUNG','NA'))
#pData(eset)

Char1<-as.character(eset[['Subgroup']])
Char2<-as.character(eset[['Sex']])
Char3<-as.character(eset[['IS_OLD']])
Char4<-as.character(eset[['IS_YOUNG']])

combination<-paste(Char1,Char2,Char3,Char4,sep='.')

f1<-factor(combination)

design<-model.matrix(~0+f1)
#colnames(design)
fit<-lmFit(eset,design)
contrast.matrix<-makeContrasts(hyp1=f1G3.Female.NA.YOUNG-f1G4.Female.NA.YOUNG,
                               hyp2=f1G4.Male.OLD.NA-f1G4.Female.OLD.NA,
                               hyp3=f1G4.Male.OLD.NA-f1G3.Male.OLD.NA,
                               hyp4=f1G4.Male.NA.YOUNG-f1G3.Male.NA.YOUNG,
                               hyp5=f1G3.Male.NA.YOUNG-f1G4.Female.NA.YOUNG,
                               hyp6=f1G3.Male.OLD.NA-f1G4.Male.OLD.NA,
                               hyp7=f1SHH.Female.NA.YOUNG-f1G3.Female.NA.YOUNG,
                               hyp8=f1G4.Female.OLD.NA-f1SHH.Female.OLD.NA,
                               hyp9=f1G4.Female.NA.YOUNG-f1WNT.Female.NA.YOUNG,
                               hyp10=f1G4.Male.OLD.NA-f1G4.Male.NA.YOUNG,
                                                             levels=design)
fit2<-contrasts.fit(fit,contrast.matrix)
fit2<-eBayes(fit2)

outTable<-topTable(fit2,coef=10,number=5000,adjust='BH',sort.by="p") 
outTable<-subset(outTable,subset=(P.Value<0.05)) #using P values because Adj. P Val. were all >0.5
nrow(outTable)
NumberofSignficantGenes<-nrow(outTable) #692

#look at which genes have the most change
#use webgestalt: http://bioinfo.vanderbilt.edu/webgestalt/option.php

Webgestalt<-as.character(outTable[['TranscriptID']]) #gives a character vector, take the first 100
#Webgestalt[1:100] #returns transcript IDs to put into the website
write(Webgestalt,file='WebGestalt',sep='\n') 

HTML(outTable,'Limma_Medulloblastoma_Cancer.html',append=F)

volcanoplot(fit2,coef=10,highlight=NumberofSignficantGenes,names=fit2$genes$GeneSymbol)
@
In this section we used Limma\cite{limma} and Affy\cite{affy} along with R2HTML\cite{R2HTML}. We created a design matrix and contrast matrix, then ran the gene expression data through tests in order to ouput a table of significant genes related to hypothesis number 10. In this  resulting table, we included only genes whose raw P value was less than 0.5 since the adjusted P values for this set were all greater than 0.5. This was analyzed with WebGestalt\cite{WebGestalt} by exporting a list of the transcript IDs, and then running a KEGG analysis on them from the WebGestalt website. A .TSV file with information on related biological pathways was downloaded from WebGestalt and uploaded to our server. The top 5 pathways shown to be involved were calcium signalling, metabolism,  neuroactive ligand interactions, Cytokine-cytokine receptor interactions, and Salivary secretions. A volcano plot was also made to illustrate the most significant genes, of which the top result was by far POU2F1.
<<WebGetalttable,results='asis',eval=TRUE>>=
#this section does not work. There is no way to get the WebGestalt TSV file to correctly read into R; we did not cover this in class, and more than an hour of Googling did not turn up any solutions that worked. Instead the top pathways are explain in the write up
# require(xtable)
# load(file='/home/kellys/Exam_2_usethis/final_sig_kegg_file_1382580887.tsv') #doesnt work
 Webgestalt_Results <-read.delim(file='final_sig_kegg_file_1382580887.tsv', sep='\t',header=T) 
print(xtable(Webgestalt_Results,
       caption='The top five Connectivity Map results for the tested hypothesis',
       include.rownames=T))
@
\subsection{Heatmap and Dendrogram I}
<<heatmap_dendrogram2,eval=TRUE>>=
suppressPackageStartupMessages(require(gplots))
suppressPackageStartupMessages(require(RColorBrewer))

PullOut<-rownames(subset(outTable,subset=(P.Value<0.05)))#always pull out!
PullOut<-PullOut[1:150]
tmp<-eset[as.numeric(PullOut),]
tmp2<-exprs(tmp)
is.matrix(tmp2)

heatmap.2(tmp2,
          Colv=TRUE,
          xlab='x axis',
          main='Young vs Old G4 males',
          key=T,
          trace='none',
          col=colorRampPalette(rev(brewer.pal(9,'RdBu')))(100),
          rowsep=c(30,81), #rowsep=c(1:length(tmp2)),
          colsep=c(17,29),
          sepcolor='white',
          scale=c('row'),
          labRow=outTable[['GeneSymbol']]
)
@
In this section we used the gplots\cite{gplots} and RColorBrewer\cite{RColorBrewer} R packages to create a heatmap showing the expression of different genes. Column and row separations are used to help visually group genes that have similar expression patterns. 
Next, we perform another test using the Limma\cite{limma} package. This time, we will compare the expression data from the WNT subgroup of Medulloblastoma patients to all other patients. It should be noted that the WNT subgroup is the only one with a positive prognosis. 
<<goodprognosis,eval=TRUE>>=
load(file='/home/kellys/Exam_2_usethis/eset_annotated.Robj')

pData(eset)<-within(pData(eset),IS_WNT<-ifelse(Subgroup=='WNT','IS_WNT','.'))
pData(eset)<-within(pData(eset),NOT_WNT<-ifelse(Subgroup !='WNT','NOT_WNT','.'))
# head(pData(eset))
Char1<-as.character(eset[['Sex']])
Char2<-as.character(eset[['IS_WNT']])
Char3<-as.character(eset[['NOT_WNT']])

combination<-paste(Char1,Char2,Char3,sep='.')

f1<-factor(combination)

design<-model.matrix(~0+f1)
colnames(design)
fit<-lmFit(eset,design)
contrast.matrix<-makeContrasts(hyp1=f1Female.IS_WNT..-(f1Female...NOT_WNT+f1Male...NOT_WNT),
                                                             levels=design)

fit2<-contrasts.fit(fit,contrast.matrix)
fit2<-eBayes(fit2)

outTable<-topTable(fit2,coef=1,number=5000,adjust='BH',sort.by="p") 
outTable<-subset(outTable,subset=(P.Value<0.05)) #using P values because Adj. P Val. were all >0.5
nrow(outTable)
NumberofSignficantGenes<-nrow(outTable) #692
#length(featureNames(eset))
#look at which genes have the most change
#use webgestalt: http://bioinfo.vanderbilt.edu/webgestalt/option.php

Webgestalt<-as.character(outTable[['TranscriptID']]) #gives a character vector, take the first 100
#Webgestalt[1:100] #returns transcript IDs to put into the website
write(Webgestalt,file='WebGestalt2',sep='\n') 

HTML(outTable,'Limma_Medulloblastoma_Cancer2.html',append=F)
# 
volcanoplot(fit2,coef=1,highlight=NumberofSignficantGenes,names=fit2$genes$GeneSymbol)
@
In this step, we again used Limma to create design and contrast matricies in order to examine the differences in gene expression between patients with WNT type disease and non-WNT type disease. We used WebGestalt\cite{WebGestalt} to run a KEGG Enrichment analysis to find the most closely assiciated biological pathways to the gene expression data. The top five results were metabolic pathways, oxidative phosphorylation, Huntington's disease, Parkinson's disease, and Alzheimer's disease. A volcano plot shows that the most significant gene was NAGAP1.
\subsection{Heatmap and Dendrogram II}
<<heatmap_dendrogram,eval=TRUE>>=
suppressPackageStartupMessages(require(gplots))
suppressPackageStartupMessages(require(RColorBrewer))

PullOut<-rownames(subset(outTable,subset=(P.Value<0.05)))#always pull out!
PullOut<-PullOut[1:150]
tmp<-eset[as.numeric(PullOut),]
tmp2<-exprs(tmp)
is.matrix(tmp2)

heatmap.2(tmp2,
          Colv=TRUE,
          xlab='x axis',
          main='WNT vs non-WNT',
          key=T,
          trace='none',
          col=colorRampPalette(rev(brewer.pal(9,'RdBu')))(100),
          rowsep=c(94), #rowsep=c(1:length(tmp2)),
          colsep=c(16),
          sepcolor='white',
          scale=c('row'),
          labRow=outTable[['GeneSymbol']]
)
@
Here we have created a dendrogram and heatmap for the tested hypothesis about gene expression in patients with and without WNT type disease. 

\section{Connectivity Map}%
We will continue to examine the gene expression of patients with WNT and non-WNT type disease. In this section, we will create a Connectivity Map in order to find drugs that may produce gene expression changes that match the WNT expression signature.
<<connmap,eval=TRUE,include=TRUE>>=
require(limma)
require(gdata)
require(plyr)
require(biomaRt)

outTable<-topTable(fit2,coef=1,n=length(featureNames(eset))) 
is.data.frame(outTable) #TRUE
outTable<-subset(outTable,subset=(adj.P.Val<=0.05))#want negatives and positives in separate vectors, feed into connectivity map
outTable<-outTable[1:1000,]
nrow(outTable)
GenesUP<-subset(outTable,subset=(logFC>0))
GenesDN<-subset(outTable,subset=(logFC<0))
identical((nrow(GenesUP)+nrow(GenesDN)),nrow(outTable))
ensembl<-useMart("ensembl")
ensembl<-useDataset("hsapiens_gene_ensembl",mart=ensembl)
GenesUPconverted<-as.character(getBM(attributes=c('affy_hg_u133a'),    # What we want
                                     filters='affy_hg_u133_plus_2',    # What we have
                                     values=GenesUP[['TranscriptID']], # Our IDs to be converted
                                     mart=ensembl))
GenesDNconverted<-as.character(getBM(attributes=c('affy_hg_u133a'),    # What we want
                                     filters='affy_hg_u133_plus_2',    # What we have
                                     values=GenesDN[['TranscriptID']], # Our IDs to be converted
                                     mart=ensembl))
write(GenesUPconverted,file='YourQuery-UP.grp',append=F)
write(GenesDNconverted,file='YourQuery-DN.grp',append=F)
CMap<-read.xls(xls='permutedResults99117.xls') 
@
In this section, we used Connectivity Map\cite{ConnectivityMap}, along with the gdata\cite{gdata} and Limma\cite{limma} R packages. We also used BiomaRt\cite{biomaRt} R package to convert the Transcript IDs to a format that is compatible with U133A. We have created a subsection table of the top 1000 genes with the lowest adjusted P values. This table then had its Transcript IDs changed to be compatible with the U133A Connectivity Map ID's. After running a Connectivity Map analysis, the following drugs were found to be closely related to the target gene expression signatures.
<<xtable,results='asis',eval=TRUE>>=
require(xtable)
print(xtable(CMap[1:3,],
       caption='The top three Connectivity Map results for the tested hypothesis',
       include.rownames=T)) #generate a nice little table to display all the info
@
In this section, we used the XTable\cite{xtable} R package to make a table showing the top three drugs whose effects are most closely correlated with the gene expression signatures found in patients with WNT type disease. The goal of a physician would be to induce gene expression expression in negative prognosis medulloblastoma patients; based on these results, trichostatin and tanespimycin may be strong candidates. They both show a positive affinity to the gene expression signature of the WNT patients. Etiocholanolone was also given as a resultin the Connectivity Map, but this drug has a negative correlation and would cause the opposite effect. While tanespimycin was previously being researched as an anti-cancer drug, late-term studies by Bristol-Myers Squibb were halted\cite{Bristol}. Additionally, trichostatin has not been studied as an anti-cancer drug, though it is know to have potential anti-cancer effects. Due to the experimental nature of these drugs, it would not be advisable for a physician to prescribe them to a patient unless the prognosis was overwhelmingly negative. 
%%%%%%%END%%%%%%%%%END%%%%%%%%%END%%%%%%%%%%%END%%%%%%%%%%%
\bibliography{exam_2_references}
\bibliographystyle{NAR}
\section{System and Session Information}
<<Session>>=
system('uname -srv',intern=T)
sessionInfo()
@
\end{document} 